/*
 * @lc app=leetcode.cn id=747 lang=typescript
 *
 * [747] 至少是其他数字两倍的最大数
 *
 * 题目描述：
 * 给你一个整数数组 nums，请你找出数组中最大的元素并检查它是否至少是数组中每个其他数字的两倍。
 * 如果是，则返回最大元素的下标，否则返回 -1。
 */

// @lc code=start
/**
 * 寻找至少是其他数字两倍的最大数的索引
 *
 * 思路：
 * 1. 只需要找到数组中的最大值和次大值
 * 2. 判断最大值是否大于等于次大值的两倍
 *
 * @param nums 整数数组
 * @returns 如果最大值至少是其他数字的两倍，返回其索引；否则返回-1
 */
function dominantIndex(nums: number[]): number {
  // 如果数组只有一个元素，则它必然是最大的，也满足条件（没有其他数字）
  if (nums.length === 1) return 0;

  // second: 次大值的索引，初始为-1表示未找到
  // max: 最大值的索引，初始为0表示假设第一个元素是最大的
  let second = -1,
    max = 0;

  // 从第二个元素开始遍历数组（因为已经假设第一个元素是最大的）
  for (let i = 1; i < nums.length; i++) {
    // 情况1: 当前元素大于当前最大值
    if (nums[i] > nums[max]) {
      // 更新次大值为之前的最大值
      second = max;
      // 更新最大值为当前元素
      max = i;
    }
    // 情况2: 当前元素不大于最大值，但大于次大值（或次大值尚未找到）
    else if (second === -1 || nums[i] > nums[second]) {
      // 更新次大值为当前元素
      second = i;
    }
    // 情况3: 当前元素既不大于最大值也不大于次大值，忽略它
  }

  // 判断最大值是否至少是次大值的两倍
  // 如果是，返回最大值的索引；否则返回-1
  return nums[max] >= nums[second] * 2 ? max : -1;
}

/**
 * 解题思路：
 *
 * 1. 要判断一个数是否至少是其他所有数字的两倍，只需要检查它是否至少是次大值的两倍
 *    - 因为如果它至少是次大值的两倍，那么它必然至少是所有其他较小值的两倍
 *
 * 2. 我们使用一次遍历同时找到最大值和次大值：
 *    - 初始设置max为第一个元素的索引
 *    - 遍历剩余元素，更新max和second
 *    - 当找到更大元素时，需要将原来的max降级为second
 *
 * 3. 边界情况：
 *    - 如果数组只有一个元素，直接返回0
 *    - 初始设置second为-1，表示尚未找到次大值
 *
 * 时间复杂度：O(n)，其中n是数组长度，只需要一次遍历
 * 空间复杂度：O(1)，只使用了常数额外空间
 */
// @lc code=end
