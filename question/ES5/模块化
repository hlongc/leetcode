/**
 * 前端模块化发展历程
 * 
 * 本文详细描述前端模块化的发展过程，从最早的无模块化开发到现代ES模块，
 * 以及各种模块化规范的特点、优缺点和使用场景。
 */

/**
 * 一、模块化的意义
 * 
 * 模块化是指将一个复杂的系统分解为多个模块以方便编码。前端模块化的核心价值：
 * 1. 代码组织：将代码按照功能划分为独立模块
 * 2. 命名空间：避免全局变量污染
 * 3. 依赖管理：明确模块间的依赖关系
 * 4. 代码复用：便于代码复用和维护
 */

/**
 * 二、全局函数和命名空间（早期实践）
 * 
 * 早期JavaScript缺乏模块化机制，常见做法是使用全局函数和简单的命名空间。
 */

// 全局函数方式 - 容易造成全局污染
function foo() { /* ... */ }
function bar() { /* ... */ }

// 命名空间方式 - 减少了全局变量，但仍然可被外部修改
var MyApp = {
  foo: function() { /* ... */ },
  bar: function() { /* ... */ }
};

/**
 * 三、IIFE (立即调用函数表达式)
 * 
 * IIFE是模块化的早期解决方案，通过函数作用域来隔离私有变量。
 * 
 * 特点：
 * - 创建独立的作用域，避免变量污染
 * - 可以暴露公共API
 * - 可以导入全局变量作为依赖
 * 
 * 缺点：
 * - 无法直接管理多模块依赖
 * - 脚本加载顺序有要求
 */

// IIFE基本模式
var Module = (function() {
  // 私有变量和函数
  var privateVar = 'I am private';
  
  function privateMethod() {
    return privateVar;
  }
  
  // 返回公共API
  return {
    publicMethod: function() {
      return privateMethod();
    }
  };
})();

// 带依赖的IIFE模式（简单的依赖注入）
var ModuleWithDependency = (function($) {
  // 使用jQuery作为依赖
  function init() {
    $('#container').html('Module initialized');
  }
  
  return {
    init: init
  };
})(jQuery); // 将依赖项传入

/**
 * 四、CommonJS
 * 
 * CommonJS是Node.js默认的模块系统，后来被Browserify等工具引入到浏览器中。
 * 
 * 特点：
 * - 同步加载模块（设计初衷是服务端使用）
 * - 简单易用的语法
 * - 模块缓存
 * - 文件即模块
 * 
 * 缺点：
 * - 同步加载不适合浏览器环境
 * - 无法直接在浏览器中使用，需要打包工具
 */

// CommonJS模块定义 (math.js)
var privateValue = 10;

function add(a, b) {
  return a + b;
}

// 导出模块API
module.exports = {
  add: add,
  multiply: function(a, b) {
    return a * b;
  }
};

// CommonJS模块使用 (app.js)
var math = require('./math');
console.log(math.add(2, 3)); // 5

/**
 * 五、AMD (Asynchronous Module Definition)
 * 
 * AMD是为浏览器环境设计的异步模块加载规范，由RequireJS推广。
 * 
 * 特点：
 * - 异步加载模块，适合浏览器环境
 * - 依赖前置声明
 * - 完善的插件系统
 * 
 * 缺点：
 * - 开发成本较高，语法较为复杂
 * - 必须通过回调函数获取依赖
 */

// AMD模块定义
define('myModule', ['jquery', 'underscore'], function($, _) {
  // 模块代码
  function initialize() {
    $('.container').html('Module initialized');
    _.each([1, 2, 3], function(num) {
      console.log(num);
    });
  }
  
  // 返回模块API
  return {
    init: initialize
  };
});

// AMD模块使用
require(['myModule'], function(myModule) {
  myModule.init();
});

/**
 * 六、CMD (Common Module Definition)
 * 
 * CMD是由SeaJS推广的模块规范，结合了CommonJS和AMD的特点。
 * 
 * 特点：
 * - 依赖就近声明（需要时再加载）
 * - 更接近CommonJS的写法
 * - 同样支持异步加载
 * 
 * 缺点：
 * - 社区支持度不如AMD和CommonJS
 * - 已经逐渐被其他模块系统替代
 */

// CMD模块定义
define(function(require, exports, module) {
  // 依赖就近引入，用到时才加载
  var $ = require('jquery');
  
  // 模块代码
  function initialize() {
    // 此处才真正加载underscore
    var _ = require('underscore');
    $('.container').html('Module initialized');
    _.each([1, 2, 3], function(num) {
      console.log(num);
    });
  }
  
  // 导出模块API
  exports.init = initialize;
});

/**
 * 七、UMD (Universal Module Definition)
 * 
 * UMD是一种通用的模块定义方式，兼容AMD、CommonJS和全局变量。
 * 
 * 特点：
 * - 跨平台兼容，适用于多种环境
 * - 结合了多种模块系统的优点
 * 
 * 缺点：
 * - 代码相对复杂
 * - 仍然需要构建工具支持
 */

// UMD模块定义
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD
    define(['jquery'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS
    module.exports = factory(require('jquery'));
  } else {
    // 浏览器全局变量
    root.MyModule = factory(root.jQuery);
  }
}(typeof self !== 'undefined' ? self : this, function($) {
  // 模块代码
  function MyModule() { /* ... */ }
  
  MyModule.prototype.init = function() {
    $('body').addClass('initialized');
  };
  
  return MyModule;
}));

/**
 * 八、Webpack的Code Splitting (require.ensure)
 * 
 * Webpack引入了代码分割的概念，使用require.ensure实现按需加载模块。
 * 
 * 特点：
 * - 支持代码分割和按需加载
 * - 兼容多种模块规范
 * - 强大的构建和优化能力
 * 
 * 缺点：
 * - 配置相对复杂
 * - 依赖构建工具
 */

// Webpack的代码分割示例
// main.js
var app = {
  init: function() {
    // 点击按钮时才加载模块
    document.getElementById('loadModule').addEventListener('click', function() {
      // 异步加载模块
      require.ensure([], function(require) {
        var module = require('./heavy-module.js');
        module.doSomething();
      }, 'heavy-module'); // chunk名称
    });
  }
};

app.init();

/**
 * 九、ES Module (ES6 Module)
 * 
 * ES Module是ECMAScript 6引入的官方模块系统，现代浏览器原生支持。
 * 
 * 特点：
 * - 语言层面的规范，原生支持
 * - 静态分析，支持tree-shaking
 * - 异步加载
 * - 值引用（非复制）
 * 
 * 缺点：
 * - 浏览器兼容性（需要较新的浏览器）
 * - 仍然需要构建工具处理复杂应用
 */

// ES Module模块定义 (math.js)
// 具名导出
export function add(a, b) {
  return a + b;
}

export function multiply(a, b) {
  return a * b;
}

// 默认导出
export default class Calculator {
  /* ... */
}

// ES Module模块使用 (app.js)
// 导入具名导出
import { add, multiply } from './math.js';
// 导入默认导出并重命名具名导出
import Calculator, { add as mathAdd } from './math.js';
// 导入整个模块
import * as math from './math.js';

console.log(add(2, 3)); // 5
console.log(math.multiply(2, 3)); // 6

/**
 * 十、<script type="module"> 浏览器原生支持
 * 
 * 现代浏览器支持通过script标签的type="module"属性直接使用ES Module。
 * 
 * 特点：
 * - 无需构建工具，浏览器原生支持
 * - 自动应用defer属性
 * - 严格模式执行
 * - 支持跨域请求
 * 
 * 缺点：
 * - 浏览器兼容性问题
 * - 文件请求数量可能较多
 * - 缺少构建优化
 */

// HTML中使用ES Module
`
<!DOCTYPE html>
<html>
<head>
  <title>ES Module Demo</title>
</head>
<body>
  <!-- 使用type="module"加载ES模块 -->
  <script type="module">
    import { add } from './math.js';
    console.log(add(2, 3)); // 5
  </script>
  
  <!-- 也可以从外部文件加载 -->
  <script type="module" src="app.js"></script>
  
  <!-- 为不支持模块的浏览器提供降级方案 -->
  <script nomodule src="fallback.js"></script>
</body>
</html>
`

/**
 * 十一、动态导入 (Dynamic Import)
 * 
 * ES2020引入的动态导入特性，支持按需加载模块。
 * 
 * 特点：
 * - 运行时按需加载模块
 * - 返回Promise
 * - 与静态导入共存
 * 
 * 缺点：
 * - 相对较新的特性，兼容性问题
 */

// 动态导入示例
button.addEventListener('click', async () => {
  try {
    // 点击时才加载math模块
    const math = await import('./math.js');
    console.log(math.add(2, 3)); // 5
  } catch (error) {
    console.error('Module loading failed:', error);
  }
});

/**
 * 十二、模块化发展总结
 * 
 * 从IIFE到ESM，前端模块化经历了一个从无到有、从简单到复杂再到简单的过程：
 * 
 * 1. 早期：全局变量、命名空间 -> 简单但问题多
 * 2. 中期：IIFE -> 解决了基本的作用域问题
 * 3. 竞争期：CommonJS/AMD/CMD -> 各有所长
 * 4. 统一期：UMD -> 兼容多种规范
 * 5. 工程化：Webpack等工具 -> 增强开发体验
 * 6. 标准化：ES Module -> 语言层面的规范
 * 7. 现代化：原生ESM + 动态导入 -> 更灵活高效
 * 
 * 当前最佳实践：
 * - 开发环境：使用ES Module，配合构建工具
 * - 生产环境：根据目标用户使用打包后的代码或原生ESM
 * - 库开发：提供UMD和ESM双格式支持
 */

/**
 * 十三、未来趋势
 * 
 * 1. Import Maps - 浏览器中直接定义模块映射
 * 2. Module Workers - Web Worker中使用模块
 * 3. 更好的浏览器原生支持
 * 4. 构建工具更智能的优化
 */

// Import Maps示例
`
<script type="importmap">
{
  "imports": {
    "lodash": "https://cdn.skypack.dev/lodash",
    "react": "https://cdn.skypack.dev/react",
    "react-dom": "https://cdn.skypack.dev/react-dom"
  }
}
</script>

<script type="module">
  import _ from 'lodash';  // 使用映射的URL
  import React from 'react';
  console.log(_.VERSION);
</script>
`
