/**
 * React中setState的同步与异步行为分析
 * 
 * 本文件详细分析React中setState的执行机制，解释其在不同情况下的同步/异步表现，
 * 并对不同版本的React进行对比分析。
 */

/**
 * 一、setState基础概念
 * 
 * setState是React中用于更新组件状态的主要API，它的调用会触发组件的重新渲染。
 * 虽然其API看起来很简单，但其内部执行机制比较复杂，在不同情况下表现出不同的行为。
 */

/**
 * 二、setState的执行过程
 * 
 * 当调用setState时，React内部会：
 * 1. 将新的state与之前的state进行合并
 * 2. 触发调和过程(reconciliation)
 * 3. 计算新的Virtual DOM并与旧的进行对比
 * 4. 更新实际DOM
 * 
 * 为了提高性能，React可能会：
 * - 将多个setState调用合并成一个批量更新
 * - 推迟更新到合适的时机执行
 */

/**
 * 三、不同情况下setState的表现
 */

// React 16及之前版本（传统版本）
{
  /**
   * 在React 16及之前版本中，setState的同步/异步表现取决于调用的环境：
   * 
   * 1. 异步更新的情况（批处理）：
   *    - React合成事件处理函数内（如onClick, onChange等）
   *    - React生命周期函数内（如componentDidMount, componentDidUpdate等）
   * 
   * 2. 同步更新的情况（立即执行）：
   *    - setTimeout/setInterval等异步回调函数内
   *    - 原生DOM事件回调函数内
   *    - Promise等异步操作的回调函数内
   *    - 其他非React上下文中
   */

  // 示例1：在React合成事件中，setState表现为"异步"（批处理）
  class AsyncExample extends React.Component {
    state = { count: 0 };
    
    handleClick = () => {
      // 第一次调用setState
      this.setState({ count: this.state.count + 1 });
      console.log(this.state.count); // 输出0，而非1
      
      // 第二次调用setState
      this.setState({ count: this.state.count + 1 });
      console.log(this.state.count); // 仍然输出0，而非2
      
      // React会将两次更新合并，最终state.count变为1，而非2
    };
    
    render() {
      return <button onClick={this.handleClick}>Click me ({this.state.count})</button>;
    }
  }

  // 示例2：在setTimeout中，setState表现为"同步"（立即执行）
  class SyncExample extends React.Component {
    state = { count: 0 };
    
    handleClick = () => {
      setTimeout(() => {
        // 在setTimeout中调用setState
        this.setState({ count: this.state.count + 1 });
        console.log(this.state.count); // 输出1，立即更新
        
        this.setState({ count: this.state.count + 1 });
        console.log(this.state.count); // 输出2，立即更新
      }, 0);
    };
    
    render() {
      return <button onClick={this.handleClick}>Click me ({this.state.count})</button>;
    }
  }
}

// React 17和React 18的过渡
{
  /**
   * React 17与16的行为基本一致，但是进行了一些内部重构，为React 18的并发特性做准备。
   * 主要变化是事件系统的修改，从document级别挂载改为root级别挂载。
   */
}

// React 18及以后版本（并发渲染时代）
{
  /**
   * React 18引入了自动批处理（Automatic Batching），使setState在更多情况下表现为"异步"。
   * 
   * 1. 在React 18中，默认情况下，所有的setState调用都会被批处理，包括：
   *    - React事件处理函数
   *    - 生命周期方法
   *    - 以及之前不会批处理的场景：
   *      * setTimeout/setInterval回调
   *      * Promise回调
   *      * 原生事件处理函数
   *      * 其他非React上下文
   * 
   * 2. 如果需要绕过自动批处理，强制同步更新，可以使用flushSync API。
   */

  // 示例1：React 18中，即使在setTimeout中，setState也表现为"异步"（批处理）
  function AutoBatchingExample() {
    const [count, setCount] = React.useState(0);
    
    const handleClick = () => {
      setTimeout(() => {
        setCount(count + 1);
        console.log(count); // 仍然输出0，而非1（与React 16不同）
        
        setCount(count + 1);
        console.log(count); // 仍然输出0，而非2
        
        // React会将更新批处理，但由于两次使用的都是旧的count值，最终count仅+1
      }, 0);
    };
    
    return <button onClick={handleClick}>Click me ({count})</button>;
  }

  // 示例2：使用flushSync强制同步更新
  function FlushSyncExample() {
    const [count, setCount] = React.useState(0);
    
    const handleClick = () => {
      // 导入flushSync
      const { flushSync } = ReactDOM;
      
      flushSync(() => {
        setCount(count + 1);
      });
      console.log(count + 1); // 现在会正确输出更新后的值
      
      flushSync(() => {
        setCount(count + 2);
      });
      console.log(count + 2); // 也会输出正确的值
    };
    
    return <button onClick={handleClick}>Click me ({count})</button>;
  }
}

/**
 * 四、setState的正确使用方式
 */

// 1. 使用函数式更新解决批处理问题
function FunctionalUpdates() {
  const [count, setCount] = React.useState(0);
  
  const handleClick = () => {
    // 不依赖当前state，而是使用前一个状态计算新状态
    setCount(prevCount => prevCount + 1);
    // count值仍然是0
    
    setCount(prevCount => prevCount + 1);
    // 但这里会基于上一次更新的结果继续+1，最终count为2
  };
  
  return <button onClick={handleClick}>Click me ({count})</button>;
}

// 2. 使用useEffect监听状态变化
function UseEffectPattern() {
  const [count, setCount] = React.useState(0);
  
  const handleClick = () => {
    setCount(count + 1);
  };
  
  // 当count变化时执行，避免在事件处理函数中依赖更新后的state
  React.useEffect(() => {
    console.log('Count updated to:', count);
    // 这里可以安全地访问更新后的count值
  }, [count]);
  
  return <button onClick={handleClick}>Click me ({count})</button>;
}

/**
 * 五、版本对比总结
 * 
 * 1. React 16及以前：
 *    - 合成事件和生命周期中：异步（批处理）
 *    - setTimeout、原生事件等中：同步（立即执行）
 *    - 使用this.setState的第二个回调参数获取更新后的状态
 * 
 * 2. React 17：
 *    - 与React 16基本相同
 *    - 事件系统从document级别改为root级别
 * 
 * 3. React 18：
 *    - 引入自动批处理，setState在所有场景默认都是异步（批处理）
 *    - 提供flushSync API用于强制同步更新
 *    - 在并发模式下，更新可能被中断和恢复，导致setState行为更加复杂
 * 
 * 最佳实践：
 * 1. 不要依赖setState后立即读取this.state/useState的值
 * 2. 使用函数式更新(prevState => newState)确保连续更新的正确性
 * 3. 使用useEffect或setState回调处理状态更新后的逻辑
 * 4. 如果确实需要同步更新，在React 18中使用flushSync
 */

/**
 * 六、底层原理解释
 * 
 * React 16及之前版本的事务机制：
 * 1. 在React事件处理函数执行前，开启批处理事务
 * 2. 执行事件处理函数内的所有setState，将更新存入队列
 * 3. 事件处理函数执行完毕后，提交批处理事务，一次性应用所有更新
 * 
 * 为什么setTimeout中的setState是同步的？
 * - 因为setTimeout回调执行时，React的批处理事务已经结束
 * - 此时React上下文不存在，setState会直接触发更新
 * 
 * React 18的自动批处理：
 * - 使用新的调度器(Scheduler)和优先级系统
 * - 所有更新都会被放入队列，按优先级处理
 * - 使用微任务(Promise.then)在当前事件循环末尾统一处理所有更新
 * - 因此即使在setTimeout等异步回调中，更新也会被批处理
 */
