/*
 * @lc app=leetcode.cn id=518 lang=typescript
 *
 * [518] 零钱兑换 II
 *
 * 题目描述：
 * 给你一个整数数组 coins 表示不同面额的硬币，另给一个整数 amount 表示总金额。
 * 请你计算并返回可以凑成总金额的硬币组合数。如果任何硬币组合都无法凑出总金额，返回 0。
 * 假设每一种面额的硬币有无限个。
 *
 * 题目数据保证结果符合 32 位带符号整数。
 */

// @lc code=start
function change(amount: number, coins: number[]): number {
  // 特殊情况处理：如果总金额为0，只有一种组合方式（不选任何硬币）
  if (amount === 0) return 1;

  // 如果没有硬币可用，则无法组成任何金额
  if (coins.length === 0) return 0;

  // 创建dp数组，dp[i]表示凑成金额i的组合数
  const dp: number[] = Array(amount + 1).fill(0);

  // 初始化：凑成金额0的组合数为1（不选任何硬币）
  dp[0] = 1;

  // 完全背包问题：外层循环遍历物品（硬币），内层循环遍历背包容量（金额）
  for (const coin of coins) {
    // 从当前硬币面额开始遍历到总金额
    // 正序遍历是完全背包的特点（允许物品重复使用）
    for (let j = coin; j <= amount; j++) {
      // 状态转移方程：dp[j] += dp[j - coin]
      // 表示：凑成金额j的组合数 = 原来已知的组合数 + 使用当前硬币后剩余金额的组合数
      dp[j] += dp[j - coin];
    }
  }

  // 返回凑成总金额的组合数
  return dp[amount];
}

/*
 * 解题思路：完全背包问题
 *
 * 1. 问题分析：
 *    - 这是一个典型的完全背包问题，每种硬币可以重复使用
 *    - 我们需要求的是组合数而非最大价值
 *
 * 2. 状态定义：
 *    - dp[i]：表示凑成金额i的组合数
 *
 * 3. 初始状态：
 *    - dp[0] = 1：表示凑成金额0的组合数为1（即不选任何硬币）
 *
 * 4. 状态转移方程：
 *    - dp[j] += dp[j - coin]
 *    - 意思是：考虑使用当前面额coin时，凑成金额j的组合数应该加上"使用coin后，
 *      凑成剩余金额(j-coin)的组合数"
 *
 * 5. 计算顺序：
 *    - 外层循环：遍历硬币（物品）
 *    - 内层循环：遍历金额（背包容量），从小到大（完全背包特点）
 *    - 注意：这种顺序确保我们计算的是组合数而非排列数
 *      如果交换两层循环顺序，会计算排列数（不同顺序的相同硬币被视为不同组合）
 *
 * 6. 时间复杂度：O(amount * coins.length)
 *    空间复杂度：O(amount)
 */
// @lc code=end
