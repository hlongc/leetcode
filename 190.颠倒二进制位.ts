/*
 * @lc app=leetcode.cn id=190 lang=typescript
 *
 * [190] 颠倒二进制位
 */

// @lc code=start
/**
 * 颠倒给定的32位无符号整数的二进制位
 *
 * 例如，输入的二进制表示为：00000010100101000001111010011100
 * 颠倒后的二进制表示为：00111001011110000010100101000000
 *
 * @param n 32位无符号整数
 * @returns 颠倒二进制位后的结果
 */
function reverseBits(n: number): number {
  // 结果初始化为0
  let result = 0;

  // 循环处理所有32位
  for (let i = 0; i < 32; i++) {
    // 将结果左移一位，为新的位腾出空间
    result <<= 1;

    // 检查n的最低位是否为1
    // (n & 1)的结果是：如果n的最低位是1则为1，否则为0
    if (n & 1) {
      // 如果n的最低位是1，将result的最低位设为1
      result |= 1;
    }

    // 将n右移一位，处理下一位
    n >>>= 1; // 使用无符号右移
  }

  // 返回最终结果
  return result >>> 0; // 确保结果为无符号32位整数
}
// @lc code=end

/**
 * 算法分析：
 *
 * 示例：n = 43261596 (二进制: 00000010100101000001111010011100)
 *
 * 初始：result = 0
 *
 * 第1次循环：
 * - n的最低位是0
 * - result左移：result = 0
 * - n右移：n = 00000001010010100000111101001110
 *
 * 第2次循环：
 * - n的最低位是0
 * - result左移：result = 0
 * - n右移：n = 00000000101001010000011110100111
 *
 * 第3次循环：
 * - n的最低位是1
 * - result左移：result = 0
 * - result |= 1：result = 1
 * - n右移：n = 00000000010100101000001111010011
 *
 * 依此类推...
 *
 * 最终result = 00111001011110000010100101000000 (十进制: 964176192)
 *
 * 核心思想：
 * 1. 逐位处理原数字的每一位
 * 2. 从原数字的最低位开始，依次放到结果的对应位置
 * 3. 原数字右移减少一位，结果左移增加一位
 *
 * 时间复杂度：O(1)，因为我们只需固定的32次操作
 * 空间复杂度：O(1)，只使用了常数个变量
 */
